---
import Layout from '../layouts/Layout.astro'
import '../styles/index.css'
---

<script src="../components/slay-the-web.js"></script>

<Layout title="Slay the Web - System">
  <div class="ActionExplorer">
    <div class="grid">
      <div class="col">
        <h2>Action Explorer</h2>
        <div class="ActionList">
          <div class="category">
            <h3>Combat</h3>
            <button class="Button" data-action="playCard">play card</button>
            <button class="Button" data-action="endTurn">end turn</button>
          </div>
          <div class="category">
            <h3>Deck</h3>
            <button class="Button" data-action="drawCards">draw</button>
            <button class="Button" data-action="discardHand">discard hand</button>
          </div>
        </div>
      </div>
      <div class="col">
        <h2>Command Input</h2>
        <div class="CommandInput">
          <input type="text" placeholder="Try: game.play(strike).on('enemy0')" class="Input"/>
          <div class="history"></div>
        </div>
        <h2>Action Preview</h2>
        <pre class="ActionPreview">Select an action to see its details</pre>
        <pre class="ActionForm"></pre>
      </div>
      <div class="col">
        <h2>State Changes</h2>
        <pre class="StateChanges"></pre>
      </div>
    </div>
  </div>
</Layout>

<script>
  import actions from '../../game/actions.js'
  import createNewGame from '../../game/new-game.js'
  import {createCard} from '../../game/cards.js'
  import {createTestDungeon} from '../../content/dungeon-encounters.js'
  import {MonsterRoom} from '../../game/rooms.js'
  import {Monster} from '../../game/monster.js'

  // Initialize a proper test environment
  const game = createNewGame(true)
  
  // Set up initial game state through proper action queue
  game.enqueue({type: 'setDungeon', dungeon: createTestDungeon()})
  game.dequeue()
  
  // Add test cards to hand through actions
  game.enqueue({type: 'addCardToHand', card: createCard('Strike')})
  game.enqueue({type: 'addCardToHand', card: createCard('Defend')})
  game.dequeue()
  game.dequeue()

  // Set up the explorer
  const explorer = document.querySelector('.ActionExplorer')
  const preview = explorer.querySelector('.ActionPreview')
  const stateChanges = explorer.querySelector('.StateChanges')
  const form = explorer.querySelector('.ActionForm')
  const input = explorer.querySelector('.CommandInput input') as HTMLInputElement
  const history = explorer.querySelector('.CommandInput .history')

  // Helper to show state changes
  function showStateChanges(before, after) {
    const changes = {
      player: {
        health: {
          before: before.player.currentHealth,
          after: after.player.currentHealth
        },
        energy: {
          before: before.player.currentEnergy,
          after: after.player.currentEnergy
        }
      },
      hand: {
        before: before.hand.length,
        after: after.hand.length
      },
      monsters: before.dungeon ? {
        before: before.dungeon.graph[before.dungeon.y][before.dungeon.x].room.monsters.map(m => m.currentHealth),
        after: after.dungeon.graph[after.dungeon.y][after.dungeon.x].room.monsters.map(m => m.currentHealth)
      } : null
    }

    stateChanges.textContent = JSON.stringify(changes, null, 2)
  }

  // Command input handling
  input?.addEventListener('keydown', (e) => {
    if (e.key === 'Enter') {
      const cmd = input.value
      try {
        // For now just show what would happen
        const entry = document.createElement('div')
        entry.innerHTML = `
          <div class="command">> ${cmd}</div>
          <div class="raw">Would execute: game.enqueue({type: 'playCard', ...})</div>
        `
        history?.appendChild(entry)
        input.value = ''
      } catch (err) {
        console.error(err)
      }
    }
  })

  // When an action is clicked, show its details
  explorer.querySelectorAll<HTMLButtonElement>('[data-action]').forEach(button => {
    button.addEventListener('click', () => {
      const actionName = button.dataset.action
      const action = actions[actionName]
      
      // Show the raw action
      preview.textContent = `
Action: ${actionName}

// Raw form
game.enqueue({type: '${actionName}', ...params})

// Function signature
${action.toString().split('\n').slice(0, 3).join('\n')}
      `.trim()

      // Show appropriate form based on action
      let formHtml = `<form data-action="${actionName}"><h3>Run Action</h3>`
      
      if (actionName === 'playCard') {
        formHtml += `
          <select name="card">
            ${game.state.hand.map(card => 
              `<option value="${card.id}">${card.name}</option>`
            ).join('')}
          </select>
          <select name="target">
            <option value="player">player</option>
            <option value="enemy0">enemy 0</option>
            <option value="enemy1">enemy 1</option>
          </select>
        `
      }

      formHtml += `<button type="submit" class="Button">Execute</button></form>`
      form.innerHTML = formHtml

      form.querySelector('form')?.addEventListener('submit', (e) => {
        e.preventDefault()
        const formEl = e.target as HTMLFormElement
        
        // Build action based on form data
        const params: any = {}
        if (actionName === 'playCard') {
          const cardId = formEl.card.value
          params.card = game.state.hand.find(c => c.id === cardId)
          params.target = formEl.target.value
        }

        // Execute the action
        const beforeState = game.state
        game.enqueue({type: actionName, ...params})
        game.dequeue()
        
        // Show focused state changes
        showStateChanges(beforeState, game.state)
      })
    })
  })
</script>

<style>
  .grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 2rem;
    padding: 2rem;
  }
  .ActionList {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }
  .category {
    border: 1px solid #ccc;
    padding: 1rem;
    border-radius: 4px;
  }
  .CommandInput {
    margin-bottom: 2rem;
  }
  .Input {
    width: 100%;
    padding: 0.5rem;
    font-family: monospace;
  }
  .history {
    margin-top: 1rem;
    font-family: monospace;
    font-size: 0.9em;
  }
  .history .command {
    color: #666;
  }
  .history .raw {
    color: #999;
    font-size: 0.8em;
  }
  select {
    display: block;
    margin: 0.5rem 0;
    padding: 0.3rem;
  }
</style>
